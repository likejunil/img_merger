#! /bin/bash

# "#"은 항상 개수를 의미한다.
# "@"은 모든 것을 의미한다.
# "?"은 실행 결과를 의미한다.

# << read >>
# read 옵션을 통해 사용자의 입력을 받을 수 있다.
# <<< 으로 입력 출처를 바꿀 수 있다.
# -d 옵션은 입력 종료 문자 지정 
# -a 옵션은 배열 저장
# -r 이스케이프 문자의 기능 적용 
# -s 에코하지 않고 조용히
# -t 기다리는 시간(초) 지정
# -p 프롬프트 출력
# -n1 줄 단위를 읽지 않고 1글자만 입력


TARGET=$@

if [ $# == 0 ]; then
    printf "\n :제거 대상을 입력하지 않음\n\n"
    exit
else
    # --------------------------
    # 제거할 대상 개수 파악
    # --------------------------
    RET=`ps -ef | grep python | grep "${TARGET}" | grep -v grep | grep -v "/usr/bin/python2" | grep -v stop | awk '{print $2}'`
    read -d "" -ra pid <<< "$RET"

    count=${#pid[@]}
    printf "\n :${count}개의 대상이 존재"

    # --------------------------
    # 제거할 대상이 많으면 제거 여부 반드시 확인
    # --------------------------
    if [ ${count} -gt 1 ]; then
        printf "\n :제거 대상이 너무 많음, ${count}개\n\n"
        ps -ef | grep python | grep "${TARGET}" | grep -v grep
        printf "\n"

        read -n1 -s -p "  :모두 제거?(y/n) => " answer

        if [ ${answer} == 'y' ]; then
            ps -ef | grep python | grep "${TARGET}" | grep -v grep | awk '{print $2}' | xargs kill -TERM
            if [ $? -eq 0 ]; then
                printf "종료 성공\n\n"
            else
                printf "종료 실패\n\n"
            fi
        fi
    # --------------------------
    # 한개의 대상 확인, 제거
    # --------------------------
    elif [ ${count} -eq 1 ]; then
        printf "\n :${pid[0]} 종료 진행\n\n"
        kill -TERM ${pid[0]}
    # --------------------------
    # 제거 대상 존재하지 않음
    # --------------------------
    elif [ ${count} -eq 0 ]; then
        printf "\n :제거 대상 프로세스가 존재하지 않음\n\n"

    else
        printf " :없다..\n\n"
    fi
fi
